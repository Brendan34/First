#include <iostream>
using namespace std;


// A doubly linked list node

struct Node {
	int data;
	struct Node* next;
	struct Node* prev;
};

// INSERT AT THE FRONT
// Inserts node at the front of the list
void insert_front(struct Node** head, int new_data)
{
	// Allocate memory for new node
	struct Node* newNode = new Node;

	// Assign data to new node
	newNode->data = new_data;

	// New node is head and previous is null, since we are adding at the front
	newNode->next = (*head);

	// Previous of head is new node
	if ((*head) != NULL)
		(*head)->prev = newNode;

	// Head points to new node
	(*head) = newNode;


}

	// INSERT A NEW NODE AFTER THE GIVEN CODE
	void insert_After(struct Node* prev_node, int new_data)
	{
		// Check if previous node is null
		if (prev_node == NULL) {
			cout << "Previous node is required, it cannot be NULL.";
			return;
		}
		// Allocate memory for a new node
		struct Node* newNode = new Node;

		// Assign data to new node
		newNode->data = new_data;

		// Set next of newnode to next of prevnode
		newNode->next = prev_node->next;

		// Set next of prev node to newnode
		prev_node->next = newNode;

		// Now set prev of newnode to prev node
		newNode->prev = prev_node;

		// Set prev of new node's next to newnode
		if (newNode->next != NULL);
	}

	// INSERT A NEW NODE AT THE END OF THE LIST

	void insert_end(struct Node** head, int new_data)
	{
		// Allocate memory for node
		struct Node* newNode = new Node;

		struct Node* last = *head; // Set last node value to head

		// Set data for new node
		newNode->data = new_data;

		// New node is the last node, so set next of new node to null

		newNode->next = NULL;

		// Check if list is empty, if yes make new node the head of list
		if (*head == NULL) {
			newNode->prev = NULL;
			*head = newNode;
			return;
		}


		// Otherwise traverse the list and go to the last node
		while (last->next != NULL)
			last = last->next;

		// Set next of last to new node
		last->next = newNode;

		// Set last of prev to new node
		newNode->prev = last;
		return;

		// DISPLAY THE DOUBLY LINKED LIST
	}

		void displayList(struct Node* node)
		{
			struct Node* last;

			while (node != NULL) {
				cout << node->data << "<==>";
				last = node;
				node = node->next;
			}
			if (node == NULL)
				cout << "NULL";
		}
	
	

int main()
{
	struct Node* head = NULL;
	insert_end(&head, 40);
	insert_front(&head, 20);
	insert_front(&head, 10);
	insert_end(&head, 50);
	insert_After(head->next, 30);

	cout << "Doubly linked list is as follows: " << endl; displayList(head);

	return 0;
}
